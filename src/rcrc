ps1 = '% '
tab = '    '
fn cd {
  builtin cd $* &&
  switch($#*){
  case 0
    prompt=($ps1 $tab)
  case *
    switch($1){
    case /*
      prompt=(`{basename `{pwd}}^$ps1 $tab)
    case */* ..*
      prompt=(`{basename `{pwd}}^$ps1 $tab)
    case *
      prompt=($1^$ps1 $tab)
    }
  }
}
prompt=(`{basename `{pwd}}^$ps1 $tab)

# shift the named variable left by 1
fn shift_var {
    var=$1
    *=$$var
    shift
    $var=$*
}
fn pushd {
    path_history = (`{pwd} $path_history)
    cd $1
    echo `{pwd} $path_history
}
fn popd {
    if(~ $#path_history 0)
      echo 'popd: directory stack empty'
    if not {
      cd $path_history(1)
      shift_var path_history
    }
    echo `{pwd} $path_history
}
SHELL=rc

# replace csh's setenv commands with equivalent name=value pairs for rc
fn fix_csh_setenv {
  sed -n -e 's/^setenv \([^ ]*\) \(.*\);$/\1=''\2'';/p'
}

fn module {
  # eval `{$LMOD_CMD rc $*}
  # rc not supported, pretend to be csh.
  eval `{$LMOD_CMD csh $* | fix_csh_setenv}
}

fn clearMT {
  #eval `{$LMOD_DIR/clearMT_cmd rc}
  eval `{$LMOD_DIR/clearMT_cmd csh | fix_csh_setenv}
}

########################################################################
#  ml is a shorthand tool for people who can't type moduel, err, module
#  It is also a combination command:
#     ml            -> module list
#     ml gcc        -> module load gcc
#     ml -gcc intel -> module unload gcc; module load intel
#  It does much more do: "ml --help" for more information.
#fn ml {
#  eval `{$LMOD_DIR/ml_cmd $*}
#}
